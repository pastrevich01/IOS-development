import UIKit

// MARK: - Базовые задачи

// MARK: - Task 1
// В массиве переменных n хранятся вещественные числа с ненулевой дробной частью.
// Реализуйте программу, округляющую числа до ближайшего целого и выводящую результат в консоль

// MARK: - Task 2
// В массиве переменных n хранятся трёхзначные числа.
// Реализуйте программу, вычисляющую и выводящую на экран сумму цифр числа n, сумму всех чисел, среднее арифмитическое, наибольшее и наименьшее из массива число.

// MARK: - Task 3
// Cоздайте массив чисел, заполните их значениями от 1 до 100, перемешайте в случайном порядке.
// С помощью итерации проверьте входит ли каждое число в интервалы (15;25), (33;42) и (85;99).
// Выведите результат и числа в консоль

// MARK: - Task 4
// Выведите на экран все члены последовательности 2an-1–1, где a1=2, которые меньше 100

// MARK: - Task 5
// Создайте массив из 20 случайных целых чисел из отрезка [1;10].
// Выведите массив в консоль в формате: «Индекс: [n]. Значение - x».
// Затем замените каждый элемент с четным индексом на ноль, а с нечётным на 1.
// И снова выведите массив в консоль

// MARK: - Task 6
// Создайте два массива из 10 целых случайных чисел из отрезка [1;9] и третий массив из 10 действительных чисел.
// Каждый элемент с i-ым индексом третьего массива должен равняться отношению элемента из первого массива с i-ым индексом к элементу из второго массива с i-ым индексом.
// Вывести все три массива на экран (каждый на отдельной строке), затем вывести количество целых элементов в третьем массиве.

// MARK: - Task 7
// Реализуйте программу, в которой создайте словарь и заполните его различными значениями
// А затем выведите в консоль новый словарь, где все ключи и значения поменялись местами.

// MARK: - Task 8
// Создадим коллекцию Set из продуктов на кухне с типом элементов String размеров в 10 элементов.
// Удалите из множества все элементы, в названиях которых будет больше 6ти букв.

// MARK: - Простые задачи

// MARK: - Task 1
// Cоздайте массив из 12 элементов, где в каждой ячейке будет храниться количество дней в соответствующем месяце
// Выведите количество дней в каждом месяце (без имен месяцев)
// Используйте еще один массив с именами месяцев чтобы вывести название месяца + количество дней
// Сделайте тоже самое, но используя массив кортежей (tupples) с параметрами (имя месяца, кол-во дней)
// Для произвольно выбранной даты (месяц и день) посчитайте количество дней до этой даты от начала года

// MARK: - Task 2

// Создайте словарь из массива, где название месяца - это ключ, а количество дней - значение.
// В цикле выведите ключ-значение попарно, причем один раз выведите через тюплы,
// а другой раз пройдитесь по массиву ключей и для каждого из них доставайте значения.
// Выведите в консоль только те месяцы, в которых 30 дней
// Выведите в консоль только те месяцы в названии которых меньше 7 букв.

// MARK: - Task 3

// Создайте словарь как журнал студентов, где имя и фамилия студента - это ключ, а оценка - это значение.
// Некоторым студентам измените текущие оценки.
// Затем добавьте 3х новых студентов в группу и оцените их.
// А потом удалите 5х ребят, потому что они отчислились.
// В конце посчитайте общий бал и средний бал ребят, которые остались в группе.

// MARK: - Task 4

// Создайте словарь типа [String: (Int, Int)?],
// Где ключ - это String и хранит в себе название шахмотной фигуры
// А значение - это tuple и хранит в себе координаты фигуры X и Y на шахматной доске.
// Обратите внимание, что значение tuple - опционал и говорит о том, что фигуру "убили".
// Добавьте 5 разных фигур на шахматную доску и выведите в консоль информацию о положении каждой фигуры или ее отсутствии на поле.

// MARK: - Task 5.
// Создайте кортеж с тремя параметрами: ваш любимый фильм, ваше любимое число и ваше любимое блюдо.
//  Все элементы кортежа должны быть именованы.
// Одним выражением запишите каждый элемент кортежа в три константы.
// Теперь создайте второй кортеж, аналогичный первому по параметрам, но описывающий другого человека.
// Создайте новый кортеж, элементами которого будут любимое число из первого кортежа, любимое число из второго кортежа и разница любимых чисел первого и второго кортежей.
// Решение оформите ниже

// MARK: - Сложные задачи
// MARK: - Task 1

// Набирается группа студентов на курс по iOS разработке.
// Стоимость обучения для каждого студента зависит от общего количества слушателей.
// Если в группе менее 5 человек - стоимость обучения равна 1000 $ для каждого студента.
// Если количество слушателей от 5 до 8 человек - стоимость обучения равна 800 $ для каждого студента.
// Если количество слушателей от 9 до 12 человек - стоимость обучения равна 650 $ для каждого студента.
// Если количество слушателей более 12ти человек - стоимость обучения равна 500 $ для каждого студента.
// Реализуйте программу, которая подсчитает полную стоимость обучения всей группы с помощью конструкции if-else.
// Программа должна получать на вход количество студентов, которые собираются обучаться.

// MARK: - Task 2

// Используя массивы, сформируйте группу студентов, готовую посещать курсы.
// Для каждого студента добавьте Фамилию, возраст и флаг, который будет хранить информацию, есть ли у него/нее в наличии техника Apple.
// Отсортируйте группу: а) по возрасту, б) по Фамилиям

// MARK: - Task 3
// Добавьте возможность случайным образом решить, какой студент пойдет у доске отвечать на вопросы преподавателя

// MARK: - Task 4

// Реализуйте программу, которая подсчитает полную стоимость обучения всей группы,
// с учетом того, что обучаться могут только те студенты, у которых есть в наличии техника Apple.
// Используете решения из предыдущих задач

// MARK: - Task 5
// Используя словари, составьте журнал студентов, которые будут обучаться на курсах.
// Все студенты в журнале должны храниться под своим уникальным номером (id)
// В журнал можно добавить только тех студентов, которые удовлетворяют условиям предыдущих задач.

// MARK: - Task 6
// Распределите студентов по группам так, чтобы в каждой группе были студенты с УНИКАЛЬНЫМИ фамилиями
// Каждый студент с повторяющейся фамилией попадает в новую группу.
// Выведите списки групп в консоль
// (Обратите внимание, какую коллекцию нужно использовать в решении)
